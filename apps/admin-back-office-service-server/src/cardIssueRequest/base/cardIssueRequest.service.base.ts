/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CardIssueRequest as PrismaCardIssueRequest,
} from "@prisma/client";

export class CardIssueRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CardIssueRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cardIssueRequest.count(args);
  }

  async cardIssueRequests(
    args: Prisma.CardIssueRequestFindManyArgs
  ): Promise<PrismaCardIssueRequest[]> {
    return this.prisma.cardIssueRequest.findMany(args);
  }
  async cardIssueRequest(
    args: Prisma.CardIssueRequestFindUniqueArgs
  ): Promise<PrismaCardIssueRequest | null> {
    return this.prisma.cardIssueRequest.findUnique(args);
  }
  async createCardIssueRequest(
    args: Prisma.CardIssueRequestCreateArgs
  ): Promise<PrismaCardIssueRequest> {
    return this.prisma.cardIssueRequest.create(args);
  }
  async updateCardIssueRequest(
    args: Prisma.CardIssueRequestUpdateArgs
  ): Promise<PrismaCardIssueRequest> {
    return this.prisma.cardIssueRequest.update(args);
  }
  async deleteCardIssueRequest(
    args: Prisma.CardIssueRequestDeleteArgs
  ): Promise<PrismaCardIssueRequest> {
    return this.prisma.cardIssueRequest.delete(args);
  }
}
