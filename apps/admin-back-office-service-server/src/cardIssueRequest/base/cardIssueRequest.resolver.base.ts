/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CardIssueRequest } from "./CardIssueRequest";
import { CardIssueRequestCountArgs } from "./CardIssueRequestCountArgs";
import { CardIssueRequestFindManyArgs } from "./CardIssueRequestFindManyArgs";
import { CardIssueRequestFindUniqueArgs } from "./CardIssueRequestFindUniqueArgs";
import { CreateCardIssueRequestArgs } from "./CreateCardIssueRequestArgs";
import { UpdateCardIssueRequestArgs } from "./UpdateCardIssueRequestArgs";
import { DeleteCardIssueRequestArgs } from "./DeleteCardIssueRequestArgs";
import { CardIssueRequestService } from "../cardIssueRequest.service";
@graphql.Resolver(() => CardIssueRequest)
export class CardIssueRequestResolverBase {
  constructor(protected readonly service: CardIssueRequestService) {}

  async _cardIssueRequestsMeta(
    @graphql.Args() args: CardIssueRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CardIssueRequest])
  async cardIssueRequests(
    @graphql.Args() args: CardIssueRequestFindManyArgs
  ): Promise<CardIssueRequest[]> {
    return this.service.cardIssueRequests(args);
  }

  @graphql.Query(() => CardIssueRequest, { nullable: true })
  async cardIssueRequest(
    @graphql.Args() args: CardIssueRequestFindUniqueArgs
  ): Promise<CardIssueRequest | null> {
    const result = await this.service.cardIssueRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CardIssueRequest)
  async createCardIssueRequest(
    @graphql.Args() args: CreateCardIssueRequestArgs
  ): Promise<CardIssueRequest> {
    return await this.service.createCardIssueRequest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CardIssueRequest)
  async updateCardIssueRequest(
    @graphql.Args() args: UpdateCardIssueRequestArgs
  ): Promise<CardIssueRequest | null> {
    try {
      return await this.service.updateCardIssueRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CardIssueRequest)
  async deleteCardIssueRequest(
    @graphql.Args() args: DeleteCardIssueRequestArgs
  ): Promise<CardIssueRequest | null> {
    try {
      return await this.service.deleteCardIssueRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
