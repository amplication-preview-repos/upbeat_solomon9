/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CardIssueRequestService } from "../cardIssueRequest.service";
import { CardIssueRequestCreateInput } from "./CardIssueRequestCreateInput";
import { CardIssueRequest } from "./CardIssueRequest";
import { CardIssueRequestFindManyArgs } from "./CardIssueRequestFindManyArgs";
import { CardIssueRequestWhereUniqueInput } from "./CardIssueRequestWhereUniqueInput";
import { CardIssueRequestUpdateInput } from "./CardIssueRequestUpdateInput";

export class CardIssueRequestControllerBase {
  constructor(protected readonly service: CardIssueRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CardIssueRequest })
  async createCardIssueRequest(
    @common.Body() data: CardIssueRequestCreateInput
  ): Promise<CardIssueRequest> {
    return await this.service.createCardIssueRequest({
      data: data,
      select: {
        businessCode: true,
        cardRequestId: true,
        createdAt: true,
        id: true,
        issueDate: true,
        requestStatus: true,
        subscriptionType: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CardIssueRequest] })
  @ApiNestedQuery(CardIssueRequestFindManyArgs)
  async cardIssueRequests(
    @common.Req() request: Request
  ): Promise<CardIssueRequest[]> {
    const args = plainToClass(CardIssueRequestFindManyArgs, request.query);
    return this.service.cardIssueRequests({
      ...args,
      select: {
        businessCode: true,
        cardRequestId: true,
        createdAt: true,
        id: true,
        issueDate: true,
        requestStatus: true,
        subscriptionType: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CardIssueRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cardIssueRequest(
    @common.Param() params: CardIssueRequestWhereUniqueInput
  ): Promise<CardIssueRequest | null> {
    const result = await this.service.cardIssueRequest({
      where: params,
      select: {
        businessCode: true,
        cardRequestId: true,
        createdAt: true,
        id: true,
        issueDate: true,
        requestStatus: true,
        subscriptionType: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CardIssueRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCardIssueRequest(
    @common.Param() params: CardIssueRequestWhereUniqueInput,
    @common.Body() data: CardIssueRequestUpdateInput
  ): Promise<CardIssueRequest | null> {
    try {
      return await this.service.updateCardIssueRequest({
        where: params,
        data: data,
        select: {
          businessCode: true,
          cardRequestId: true,
          createdAt: true,
          id: true,
          issueDate: true,
          requestStatus: true,
          subscriptionType: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CardIssueRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCardIssueRequest(
    @common.Param() params: CardIssueRequestWhereUniqueInput
  ): Promise<CardIssueRequest | null> {
    try {
      return await this.service.deleteCardIssueRequest({
        where: params,
        select: {
          businessCode: true,
          cardRequestId: true,
          createdAt: true,
          id: true,
          issueDate: true,
          requestStatus: true,
          subscriptionType: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
