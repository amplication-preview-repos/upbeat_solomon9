/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TopUpCardRequestService } from "../topUpCardRequest.service";
import { TopUpCardRequestCreateInput } from "./TopUpCardRequestCreateInput";
import { TopUpCardRequest } from "./TopUpCardRequest";
import { TopUpCardRequestFindManyArgs } from "./TopUpCardRequestFindManyArgs";
import { TopUpCardRequestWhereUniqueInput } from "./TopUpCardRequestWhereUniqueInput";
import { TopUpCardRequestUpdateInput } from "./TopUpCardRequestUpdateInput";

export class TopUpCardRequestControllerBase {
  constructor(protected readonly service: TopUpCardRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TopUpCardRequest })
  async createTopUpCardRequest(
    @common.Body() data: TopUpCardRequestCreateInput
  ): Promise<TopUpCardRequest> {
    return await this.service.createTopUpCardRequest({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        currency: true,
        id: true,
        payementMethod: true,
        requestDate: true,
        status: true,
        topupRequestId: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TopUpCardRequest] })
  @ApiNestedQuery(TopUpCardRequestFindManyArgs)
  async topUpCardRequests(
    @common.Req() request: Request
  ): Promise<TopUpCardRequest[]> {
    const args = plainToClass(TopUpCardRequestFindManyArgs, request.query);
    return this.service.topUpCardRequests({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        currency: true,
        id: true,
        payementMethod: true,
        requestDate: true,
        status: true,
        topupRequestId: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TopUpCardRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async topUpCardRequest(
    @common.Param() params: TopUpCardRequestWhereUniqueInput
  ): Promise<TopUpCardRequest | null> {
    const result = await this.service.topUpCardRequest({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        currency: true,
        id: true,
        payementMethod: true,
        requestDate: true,
        status: true,
        topupRequestId: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TopUpCardRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTopUpCardRequest(
    @common.Param() params: TopUpCardRequestWhereUniqueInput,
    @common.Body() data: TopUpCardRequestUpdateInput
  ): Promise<TopUpCardRequest | null> {
    try {
      return await this.service.updateTopUpCardRequest({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          currency: true,
          id: true,
          payementMethod: true,
          requestDate: true,
          status: true,
          topupRequestId: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TopUpCardRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTopUpCardRequest(
    @common.Param() params: TopUpCardRequestWhereUniqueInput
  ): Promise<TopUpCardRequest | null> {
    try {
      return await this.service.deleteTopUpCardRequest({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          currency: true,
          id: true,
          payementMethod: true,
          requestDate: true,
          status: true,
          topupRequestId: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
